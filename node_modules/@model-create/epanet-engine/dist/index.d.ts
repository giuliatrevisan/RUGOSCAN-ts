// Generated from epanet2_2.h on 2025-05-16T18:00:49.149Z
// WARNING: This file is auto-generated. Do not edit manually.

type Pointer = number;

// TODO: Define EmscriptenFS interface more completely if needed
interface EmscriptenFS {
    mkdir(path: string): void;
    writeFile(path: string, data: string | Uint8Array, opts?: { encoding?: 'utf8' | 'binary' }): void;
    readFile(path: string, opts?: { encoding: 'utf8' | 'binary' }): string | Uint8Array;
    // Add other FS methods you use
}

export interface EpanetModule {
    // --- Standard Emscripten Runtime ---
    _malloc(size: number): Pointer;
    _free(ptr: Pointer): void;
    FS: EmscriptenFS;
    getValue(ptr: Pointer, type: 'i8' | 'i16' | 'i32' | 'i64' | 'float' | 'double' | '*' | string, noSafe?: boolean): number;
    lengthBytesUTF8(str: string): number;
    stringToUTF8(str: string, outPtr: Pointer, maxBytesToWrite: number): void;
    stringToNewUTF8(str: string): Pointer;
    UTF8ToString(ptr: Pointer): string;
    HEAP8: Int8Array;
    HEAP32: Int32Array;
    HEAPF64: Float64Array;
    // Add any other EXPORTED_RUNTIME_METHODS here

    // --- Exported EPANET Functions ---
    /**
     * Creates an EPANET project.
     *
     * @param ph [out] an EPANET project handle that is passed into all other API functions.
     * @returns an error code.
EN_createproject must be called before any other API functions are used.
     */
    _EN_createproject(ph: Pointer): number;

    /**
     * Deletes a currently opened EPANET project.
     *
     * @param ph [out] an EPANET project handle which is returned as NULL.
     * @returns an error code.
EN_deleteproject should be called after all network analysis has been completed.
     */
    _EN_deleteproject(ph: Pointer): number;

    /**
     * Runs a complete EPANET simulation.
     *
     * @param ph an EPANET project handle.
     * @param inpFile the name of an existing EPANET-formatted input file.
     * @param rptFile the name of a report file to be created (or "" if not needed)
     * @param outFile the name of a binary output file to be created (or "" if not needed)
     * @param pviewprog a callback function that takes a character string (char *) as its only parameter.
     * @returns an error code
The callback function should reside in and be used by the calling code to display
the progress messages that EPANET generates as it carries out its computations. Here is
an example of a such a function that displays progress messages to stdout:
\code {.c}
void  writeConsole(char *s)
{
fprintf(stdout, "\n%s", s);
}
\endcode
It would be passed into EN_runproject as `&writeConsole`. If this feature is not needed then
the pviewprog argument should be `NULL`.
     */
    _EN_runproject(ph: Pointer, inpFile: Pointer, rptFile: Pointer, outFile: Pointer, pviewprog: Pointer): number;

    /**
     * Initializes an EPANET project.
     *
     * @param ph an EPANET project handle.
     * @param rptFile the name of a report file to be created (or "" if not needed).
     * @param outFile the name of a binary output file to be created (or "" if not needed).
     * @param unitsType the choice of flow units (see @ref EN_FlowUnits).
     * @param headLossType the choice of head loss formula (see @ref EN_HeadLossType).
     * @returns an error code.
This function should be called immediately after ::EN_createproject if an EPANET-formatted input
file will not be used to supply network data. If the project receives it's network data
from an input file then there is no need to call this function.
     */
    _EN_init(ph: Pointer, rptFile: Pointer, outFile: Pointer, unitsType: number, headLossType: number): number;

    /**
     * Opens an EPANET input file & reads in network data.
     *
     * @param ph an EPANET project handle.
     * @param inpFile the name of an existing EPANET-formatted input file.
     * @param rptFile the name of a report file to be created (or "" if not needed).
     * @param outFile the name of a binary output file to be created (or "" if not needed).
     * @returns an error code.
This function should be called immediately after ::EN_createproject if an EPANET-formatted
input file will be used to supply network data.
     */
    _EN_open(ph: Pointer, inpFile: Pointer, rptFile: Pointer, outFile: Pointer): number;

    /**
     * Retrieves the title lines of the project
     *
     * @param ph an EPANET project handle.
     * @param out_line1 [out] first title line
     * @param out_line2 [out] second title line
     * @param out_line3 [out] third title line
     * @returns an error code
     */
    _EN_gettitle(ph: Pointer, out_line1: Pointer, out_line2: Pointer, out_line3: Pointer): number;

    /**
     * Sets the title lines of the project
     *
     * @param ph an EPANET project handle.
     * @param line1 first title line
     * @param line2 second title line
     * @param line3 third title line
     * @returns an error code
     */
    _EN_settitle(ph: Pointer, line1: Pointer, line2: Pointer, line3: Pointer): number;

    /**
     * Retrieves a descriptive comment assigned to a Node, Link, Pattern or Curve.
     *
     * @param ph an EPANET project handle.
     * @param object a type of object (either EN_NODE, EN_LINK, EN_TIMEPAT or EN_CURVE)
     * @param index the object's index starting from 1
     * @param out_comment [out] the comment string assigned to the object
     * @returns an error code
     */
    _EN_getcomment(ph: Pointer, object: number, index: number, out_comment: Pointer): number;

    /**
     * Assigns a descriptive comment to a Node, Link, Pattern or Curve.
     *
     * @param ph an EPANET project handle.
     * @param object a type of object (either EN_NODE, EN_LINK, EN_TIMEPAT or EN_CURVE)
     * @param index the object's index starting from 1
     * @param comment [out] the comment string assigned to the object
     * @returns an error code
     */
    _EN_setcomment(ph: Pointer, object: number, index: number, comment: Pointer): number;

    /**
     * Retrieves the number of objects of a given type in a project.
     *
     * @param ph an EPANET project handle.
     * @param object a type of object to count (see @ref EN_CountType)
     * @param count [out] number of objects of the specified type
     * @returns an error code
     */
    _EN_getcount(ph: Pointer, object: number, count: Pointer): number;

    /**
     * Saves a project's data to an EPANET-formatted text file.
     *
     * @param ph an EPANET project handle.
     * @param filename the name of the file to create.
     * @returns Error code
     */
    _EN_saveinpfile(ph: Pointer, filename: Pointer): number;

    /**
     * Closes a project and frees all of its memory.
     *
     * @param ph an EPANET project handle.
     * @returns Error code
This function clears all existing data from a project but does not delete the
project, so it can be re-used with another set of network data. Use ::EN_deleteproject
to actually delete a project from memory.
     */
    _EN_close(ph: Pointer): number;

    /**
     * Runs a complete hydraulic simulation with results for all time periods
written to a temporary hydraulics file.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
Use ::EN_solveH to generate a complete hydraulic solution which can stand alone
or be used as input to a water quality analysis. This function will not allow one to
examine intermediate hydraulic results as they are generated. It can also be followed by calls
to ::EN_saveH and ::EN_report to write hydraulic results to the report file.
The sequence ::EN_openH - ::EN_initH - ::EN_runH - ::EN_nextH - ::EN_closeH
can be used instead to gain access to results at intermediate time periods and
directly adjust link status and control settings as a simulation proceeds.
<b>Example:</b>
\code {.c}
EN_Project ph;
EN_createproject(&ph);
EN_open(ph, "net1.inp", "net1.rpt", "");
EN_solveH(ph);
EN_solveQ(ph);
EN_report(ph);
EN_deleteproject(ph);
\endcode
     */
    _EN_solveH(ph: Pointer): number;

    /**
     * Uses a previously saved binary hydraulics file to supply a project's hydraulics.
     *
     * @param ph an EPANET project handle.
     * @param filename the name of the binary file containing hydraulic results.
     * @returns an error code.
Call this function to re-use a set of hydraulic analysis results saved previously. This
can save computational time if water quality analyses are being made under the same set
of hydraulic conditions.
Do not call this function while the hydraulics solver is open.
     */
    _EN_usehydfile(ph: Pointer, filename: Pointer): number;

    /**
     * Opens a project's hydraulic solver.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
Call ::EN_openH prior to running the first hydraulic analysis using the
::EN_initH - ::EN_runH - ::EN_nextH sequence. Multiple analyses can be made before
calling ::EN_closeH to close the hydraulic solver.
Do not call this function if ::EN_solveH is being used to run a complete hydraulic
analysis or if hydraulics are being supplied by a previously saved hydraulics file
using ::EN_usehydfile.
     */
    _EN_openH(ph: Pointer): number;

    /**
     * Initializes a network prior to running a hydraulic analysis.
     *
     * @param ph an EPANET project handle.
     * @param initFlag a 2-digit initialization flag (see @ref EN_InitHydOption).
     * @returns an error code.
This function initializes storage tank levels, link status and settings, and
the simulation time clock prior to running a hydraulic analysis.
The initialization flag is a two digit number where the 1st (left) digit
indicates if link flows should be re-initialized (1) or not (0), and the
2nd digit indicates if hydraulic results should be saved to a temporary
binary hydraulics file (1) or not (0).
Be sure to call ::EN_initH prior to running a hydraulic analysis using a
::EN_runH - ::EN_nextH loop.
Choose to save hydraulics results if you will be:
- making a subsequent water quality run,
- using ::EN_report to generate a report
- using ::EN_savehydfile to save the binary hydraulics file.
There is no need to save hydraulics if you will be writing custom code to
process hydraulic results as they are generated using the functions ::EN_getnodevalue
and ::EN_getlinkvalue.
     */
    _EN_initH(ph: Pointer, initFlag: number): number;

    /**
     * Computes a hydraulic solution for the current point in time.
     *
     * @param ph an EPANET project handle.
     * @param currentTime [out] the current simulation time in seconds.
     * @returns an error or warning code.
This function is used in a loop with ::EN_nextH to run an extended period hydraulic
simulation. This process automatically updates the simulation clock time so \b currentTime
should be treated as a read-only variable.
::EN_initH must have been called prior to running the ::EN_runH - ::EN_nextH loop.
See ::EN_nextH for an example of using this function.
     */
    _EN_runH(ph: Pointer, currentTime: Pointer): number;

    /**
     * Determines the length of time until the next hydraulic event occurs in an
extended period simulation.
     *
     * @param ph an EPANET project handle.
     * @param tStep [out] the time (in seconds) until the next hydraulic event or 0 if at
the end of the full simulation duration.
     * @returns an error code.
This function is used in a loop with ::EN_runH to run an extended period hydraulic
simulation.
The value of \b tstep should be treated as a read-only variable. It is automatically
computed as the smaller of:
- the time interval until the next hydraulic time step begins
- the time interval until the next reporting time step begins
- the time interval until the next change in demands occurs
- the time interval until a tank becomes full or empty
- the time interval until a control or rule fires.
<B>Example:</B>
\code {.c}
long t, tstep;
EN_openH(ph);
EN_initH(ph, EN_NOSAVE);
do {
EN_runH(ph, &t);
// Retrieve hydraulic results for time t
EN_nextH(ph, &tstep);
} while (tstep > 0);
EN_closeH(ph);
\endcode
     */
    _EN_nextH(ph: Pointer, tStep: Pointer): number;

    /**
     * Transfers a project's hydraulics results from its temporary hydraulics file
to its binary output file, where results are only reported at uniform reporting intervals.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
::EN_saveH is used when only a hydraulic analysis is run and results at uniform reporting
intervals need to be transferred to a project's binary output file. Such would be the case
when results are to be written in formatted fashion to the project's report file using ::EN_report.
     */
    _EN_saveH(ph: Pointer): number;

    /**
     * Saves a project's temporary hydraulics file to disk.
     *
     * @param ph an EPANET project handle.
     * @param filename the name of the file to be created.
     * @returns an error code.
Use this function to save the current set of hydraulics results to a file, either for
post-processing or to be used at a later time by calling the ::EN_usehydfile function.
The hydraulics file contains nodal demands and heads and link flows, status, and settings
for all hydraulic time steps, even intermediate ones.
Before calling this function hydraulic results must have been generated and saved by having
called ::EN_solveH or the ::EN_initH - ::EN_runH - ::EN_nextH sequence with the initflag
argument of ::EN_initH set to \b EN_SAVE or \b EN_SAVE_AND_INIT.
     */
    _EN_savehydfile(ph: Pointer, filename: Pointer): number;

    /**
     * Closes the hydraulic solver freeing all of its allocated memory.
     *
     * @param ph 
     * @returns an error code.
Call ::EN_closeH after all hydraulics analyses have been made using
::EN_initH - ::EN_runH - ::EN_nextH. Do not call this function if ::EN_solveH is being used.
     */
    _EN_closeH(ph: Pointer): number;

    /**
     * Runs a complete water quality simulation with results at uniform
reporting intervals written to the project's binary output file.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
A hydraulic analysis must have been run and saved to a hydraulics file before
calling ::EN_solveQ. This function will not allow one to examine intermediate water
quality results as they are generated. It can be followed by a call to ::EN_report
to write all hydraulic and water quality results to a formatted report file.
One can instead use the ::EN_openQ - ::EN_initQ - ::EN_runQ - ::EN_nextQ - ::EN_closeQ
sequence to gain access to gain access to water quality results at intermediate time
periods.
<b>Example:</b> see ::EN_solveH.
     */
    _EN_solveQ(ph: Pointer): number;

    /**
     * Opens a project's water quality solver.
     *
     * @param ph n EPANET project handle.
     * @returns an error code.
Call ::EN_openQ prior to running the first water quality analysis using an
::EN_initQ - ::EN_runQ - ::EN_nextQ (or ::EN_stepQ) sequence. Multiple water
quality analyses can be made before calling ::EN_closeQ to close the water
quality solver.
Do not call this function if a complete water quality analysis will be made
using ::EN_solveQ.
     */
    _EN_openQ(ph: Pointer): number;

    /**
     * Initializes a network prior to running a water quality analysis.
     *
     * @param ph an EPANET project handle.
     * @param saveFlag set to \b EN_SAVE (1) if results are to be saved to the project's
binary output file, or to \b EN_NOSAVE (0) if not.
     * @returns an error code.
Call ::EN_initQ prior to running a water quality analysis using ::EN_runQ in
conjunction with either ::EN_nextQ or ::EN_stepQ.
::EN_openQ must have been called prior to calling ::EN_initQ.
Do not call ::EN_initQ if a complete water quality analysis will be made using ::EN_solveQ.
     */
    _EN_initQ(ph: Pointer, saveFlag: number): number;

    /**
     * Makes hydraulic and water quality results at the start of the current time
period available to a project's water quality solver.
     *
     * @param ph an EPANET project handle.
     * @param currentTime [out] current simulation time in seconds.
     * @returns an error code.
Use ::EN_runQ along with ::EN_nextQ in a loop to access water quality results at the
start of each hydraulic period in an extended period simulation. Or use it in a loop
with ::EN_stepQ to access results at the start of each water quality time step. See
each of these functions for examples of how to code such loops.
::EN_initQ must have been called prior to running an ::EN_runQ - ::EN_nextQ
(or ::EN_stepQ) loop.
The current time of the simulation is determined from information saved with the
hydraulic analysis that preceded the water quality analysis. Treat it as a read-only
variable.
     */
    _EN_runQ(ph: Pointer, currentTime: Pointer): number;

    /**
     * Advances a water quality simulation over the time until the next hydraulic event.
     *
     * @param ph an EPANET project handle.
     * @param tStep [out] time (in seconds) until the next hydraulic event or 0 if at the end
of the full simulation duration.
     * @returns an error code.
This function is used in a loop with ::EN_runQ to perform an extended period water
quality analysis. It reacts and routes a project's water quality constituent over a
time step determined by when the next hydraulic event occurs. Use ::EN_stepQ instead
if you wish to generate results over each water quality time step.
The value of \b tStep is determined from information produced by the hydraulic analysis
that preceded the water quality analysis. Treat it as a read-only variable.
<b>Example:</b>
\code {.c}
long t, tStep;
EN_solveH(ph);  // Generate & save hydraulics
EN_openQ(ph);
EN_initQ(ph, EN_NOSAVE);
do {
EN_runQ(ph, &t);
// Monitor results at time t, which
// begins a new hydraulic time period
EN_nextQ(ph, &tStep);
} while (tStep > 0);
EN_closeQ(ph);
\endcode
     */
    _EN_nextQ(ph: Pointer, tStep: Pointer): number;

    /**
     * Advances a water quality simulation by a single water quality time step.
     *
     * @param ph an EPANET project handle.
     * @param timeLeft [out] time left (in seconds) to the overall simulation duration.
     * @returns an error code.
This function is used in a loop with ::EN_runQ to perform an extended period water
quality simulation. It allows one to generate water quality results at each water
quality time step of the simulation, rather than over each hydraulic event period
as with ::EN_nextQ.
Use the argument \b timeLeft to determine when no more calls to ::EN_runQ are needed
because the end of the simulation period has been reached (i.e., when \b timeLeft = 0).
     */
    _EN_stepQ(ph: Pointer, timeLeft: Pointer): number;

    /**
     * Closes the water quality solver, freeing all of its allocated memory.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
Call ::EN_closeQ after all water quality analyses have been made using the
::EN_initQ - ::EN_runQ - ::EN_nextQ (or ::EN_stepQ) sequence of function calls.
Do not call this function if ::EN_solveQ is being used.
     */
    _EN_closeQ(ph: Pointer): number;

    /**
     * Writes a line of text to a project's report file.
     *
     * @param ph an EPANET project handle.
     * @param line a text string to write.
     * @returns an error code.
     */
    _EN_writeline(ph: Pointer, line: Pointer): number;

    /**
     * Writes simulation results in a tabular format to a project's report file.
     *
     * @param ph an EPANET project handle.
     * @returns an error code
Either a full hydraulic analysis or full hydraulic and water quality analysis must
have been run, with results saved to file, before ::EN_report is called. In the
former case, ::EN_saveH must also be called first to transfer results from the
project's intermediate hydraulics file to its output file.
The format of the report is controlled by commands issued with ::EN_setreport.
     */
    _EN_report(ph: Pointer): number;

    /**
     * Copies the current contents of a project's report file to another file.
     *
     * @param ph an EPANET project handle.
     * @param filename the full path name of the destination file.
     * @returns an error code.
This function allows toolkit clients to retrieve the contents of a project's
report file while the project is still open.
     */
    _EN_copyreport(ph: Pointer, filename: Pointer): number;

    /**
     * Clears the contents of a project's report file.
     *
     * @param ph an EPANET project handle.
     * @returns an error code.
     */
    _EN_clearreport(ph: Pointer): number;

    /**
     * Resets a project's report options to their default values.
     *
     * @param ph an EPANET project handle.
     * @returns an error code
After calling this function the default reporting options are in effect. These are:
- no status report
- no energy report
- no nodes reported on
- no links reported on
- node variables reported to 2 decimal places
- link variables reported to 2 decimal places (3 for friction factor)
- node variables reported are elevation, head, pressure, and quality
- link variables reported are flow, velocity, and head loss.
     */
    _EN_resetreport(ph: Pointer): number;

    /**
     * Processes a reporting format command.
     *
     * @param ph an EPANET project handle.
     * @param format a report formatting command.
     * @returns an error code
Acceptable report formatting commands are described in the @ref ReportPage section of
the @ref InpFile topic.
Formatted results of a simulation can be written to a project's report file
using the ::EN_report function.
     */
    _EN_setreport(ph: Pointer, format: Pointer): number;

    /**
     * Sets the level of hydraulic status reporting.
     *
     * @param ph an EPANET project handle.
     * @param level a status reporting level code (see @ref EN_StatusReport).
     * @returns an error code.
Status reporting writes changes in the hydraulics status of network elements to a
project's  report file as a hydraulic simulation unfolds. There are three levels
of reporting: \b EN_NO_REPORT (no status reporting), \b EN_NORMAL_REPORT (normal
reporting) \b EN_FULL_REPORT (full status reporting).
The full status report contains information at each trial of the solution to the
system hydraulic equations at each time step of a simulation. It is useful mainly
for debugging purposes.
If many hydraulic analyses will be run in the application it is recommended that
status reporting be turned off (<b>level = EN_NO_REPORT</b>).
     */
    _EN_setstatusreport(ph: Pointer, level: number): number;

    /**
     * Retrieves the toolkit API version number.
     *
     * @param version [out] the version of the OWA-EPANET toolkit.
     * @returns an error code.
The version number is to be interpreted with implied decimals, i.e.,
"20100" == "2(.)01(.)00"
     */
    _EN_getversion(version: Pointer): number;

    /**
     * Returns the text of an error message generated by an error code.
     *
     * @param errcode an error code.
     * @param out_errmsg [out] the error message generated by the error code
     * @param maxLen maximum number of characters that errmsg can hold
     * @returns an error code
Error message strings should be at least @ref EN_SizeLimits "EN_MAXMSG" characters in length.
     */
    _EN_geterror(errcode: number, out_errmsg: Pointer, maxLen: number): number;

    /**
     * Retrieves a particular simulation statistic.
     *
     * @param ph an EPANET project handle.
     * @param type the type of statistic to retrieve (see @ref EN_AnalysisStatistic).
     * @param value [out] the value of the statistic.
     * @returns an error code
     */
    _EN_getstatistic(ph: Pointer, type: number, value: Pointer): number;

    /**
     * Retrieves the order in which a node or link appears in an @ref OutFile "output file".
     *
     * @param ph an EPANET project handle.
     * @param type a type of element (either @ref EN_NODE or @ref EN_LINK).
     * @param index the element's current index (starting from 1).
     * @param value [out] the order in which the element's results were written to file.
     * @returns an error code.
If the element does not appear in the file then its result index is 0.
This function can be used to correctly retrieve results from an EPANET binary output file
after the order of nodes or links in a network's database has been changed due to editing
operations.
     */
    _EN_getresultindex(ph: Pointer, type: number, index: number, value: Pointer): number;

    /**
     * Retrieves the value of an analysis option.
     *
     * @param ph an EPANET project handle.
     * @param option a type of analysis option (see @ref EN_Option).
     * @param value [out] the current value of the option.
     * @returns an error code
     */
    _EN_getoption(ph: Pointer, option: number, value: Pointer): number;

    /**
     * Sets the value for an anlysis option.
     *
     * @param ph an EPANET project handle.
     * @param option a type of analysis option (see @ref EN_Option).
     * @param value the new value assigned to the option.
     * @returns an error code.
@see EN_Option
     */
    _EN_setoption(ph: Pointer, option: number, value: number): number;

    /**
     * Retrieves a project's flow units.
     *
     * @param ph an EPANET project handle.
     * @param units [out] a flow units code (see @ref EN_FlowUnits)
     * @returns an error code.
Flow units in liters or cubic meters implies that SI metric units are used for all
other quantities in addition to flow. Otherwise US Customary units are employed.
     */
    _EN_getflowunits(ph: Pointer, units: Pointer): number;

    /**
     * Sets a project's flow units.
     *
     * @param ph an EPANET project handle.
     * @param units a flow units code (see @ref EN_FlowUnits)
     * @returns an error code.
Flow units in liters or cubic meters implies that SI metric units are used for all
other quantities in addition to flow. Otherwise US Customary units are employed.
     */
    _EN_setflowunits(ph: Pointer, units: number): number;

    /**
     * Retrieves the value of a time parameter.
     *
     * @param ph an EPANET project handle.
     * @param param a time parameter code (see @ref EN_TimeParameter).
     * @param value [out] the current value of the time parameter (in seconds).
     * @returns an error code.
     */
    _EN_gettimeparam(ph: Pointer, param: number, value: Pointer): number;

    /**
     * Sets the value of a time parameter.
     *
     * @param ph an EPANET project handle.
     * @param param a time parameter code (see @ref EN_TimeParameter).
     * @param value the new value of the time parameter (in seconds)
     * @returns an error code.
     */
    _EN_settimeparam(ph: Pointer, param: number, value: number): number;

    /**
     * Gets information about the type of water quality analysis requested.
     *
     * @param ph an EPANET project handle.
     * @param qualType [out] type of analysis to run (see @ref EN_QualityType).
     * @param out_chemName [out] name of chemical constituent.
     * @param out_chemUnits [out] concentration units of the constituent.
     * @param traceNode [out] index of the node being traced (if applicable).
     * @returns an error code.
     */
    _EN_getqualinfo(ph: Pointer, qualType: Pointer, out_chemName: Pointer, out_chemUnits: Pointer, traceNode: Pointer): number;

    /**
     * Retrieves the type of water quality analysis to be run.
     *
     * @param ph an EPANET project handle.
     * @param qualType [out] the type of analysis to run (see @ref EN_QualityType).
     * @param traceNode [out] the index of node being traced, if <b>qualType = EN_TRACE</b>.
     * @returns an error code.
     */
    _EN_getqualtype(ph: Pointer, qualType: Pointer, traceNode: Pointer): number;

    /**
     * Sets the type of water quality analysis to run.
     *
     * @param ph an EPANET project handle.
     * @param qualType the type of analysis to run (see @ref EN_QualityType).
     * @param chemName the name of the quality constituent.
     * @param chemUnits the concentration units of the constituent.
     * @param traceNode the ID name of the node being traced if <b>qualType = EN_TRACE</b>.
     * @returns an error code.
Chemical name and units can be an empty string if the analysis is not for a chemical.
The same holds for the trace node if the analysis is not for source tracing.
Note that the trace node is specified by ID name and not by index.
     */
    _EN_setqualtype(ph: Pointer, qualType: number, chemName: Pointer, chemUnits: Pointer, traceNode: Pointer): number;

    /**
     * Adds a new node to a project.
     *
     * @param ph an EPANET project handle.
     * @param id the ID name of the node to be added.
     * @param nodeType the type of node being added (see @ref EN_NodeType)
     * @param index [out] the index of the newly added node
     * @returns an error code.
When a new node is created all of its properties (see @ref EN_NodeProperty) are set to 0.
     */
    _EN_addnode(ph: Pointer, id: Pointer, nodeType: number, index: Pointer): number;

    /**
     * Deletes a node from a project.
     *
     * @param ph an EPANET project handle.
     * @param index the index of the node to be deleted.
     * @param actionCode the action taken if any control contains the node and its links.
     * @returns an error code.
If \b actionCode is \b EN_UNCONDITIONAL then the node, its incident links and all
simple and rule-based controls that contain them are deleted. If set to
\b EN_CONDITIONAL then the node is not deleted if it or its incident links appear
in any controls and error code 261 is returned.
     */
    _EN_deletenode(ph: Pointer, index: number, actionCode: number): number;

    /**
     * Gets the index of a node given its ID name.
     *
     * @param ph an EPANET project handle.
     * @param id a node ID name.
     * @param index [out] the node's index (starting from 1).
     * @returns an error code
     */
    _EN_getnodeindex(ph: Pointer, id: Pointer, index: Pointer): number;

    /**
     * Gets the ID name of a node given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a node's index (starting from 1).
     * @param out_id [out] the node's ID name.
     * @returns an error code
The ID name must be sized to hold at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getnodeid(ph: Pointer, index: number, out_id: Pointer): number;

    /**
     * Changes the ID name of a node.
     *
     * @param ph an EPANET project handle.
     * @param index a node's index (starting from 1).
     * @param newid the new ID name for the node.
     * @returns an error code.
The ID name must not be longer than @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_setnodeid(ph: Pointer, index: number, newid: Pointer): number;

    /**
     * Retrieves a node's type given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a node's index (starting from 1).
     * @param nodeType [out] the node's type (see @ref EN_NodeType).
     * @returns an error code.
     */
    _EN_getnodetype(ph: Pointer, index: number, nodeType: Pointer): number;

    /**
     * Retrieves a property value for a node.
     *
     * @param ph an EPANET project handle.
     * @param index a node's index.
     * @param property the property to retrieve (see @ref EN_NodeProperty).
     * @param value [out] the current value of the property.
     * @returns an error code.
Values are returned in units that depend on the units used for flow rate
(see @ref Units).
     */
    _EN_getnodevalue(ph: Pointer, index: number, property: number, value: Pointer): number;

    /**
     * Sets a property value for a node.
     *
     * @param ph an EPANET project handle.
     * @param index a node's index (starting from 1).
     * @param property the property to set (see @ref EN_NodeProperty).
     * @param value the new value for the property.
     * @returns an error code.
Values are in units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_setnodevalue(ph: Pointer, index: number, property: number, value: number): number;

    /**
     * Sets a group of properties for a junction node.
     *
     * @param ph an EPANET project handle.
     * @param index a junction node's index (starting from 1).
     * @param elev the value of the junction's elevation.
     * @param dmnd the value of the junction's primary base demand.
     * @param dmndpat the ID name of the demand's time pattern ("" for no pattern)
     * @returns an error code.
These properties have units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_setjuncdata(ph: Pointer, index: number, elev: number, dmnd: number, dmndpat: Pointer): number;

    /**
     * Sets a group of properties for a tank node.
     *
     * @param ph an EPANET project handle.
     * @param index a tank node's index (starting from 1).
     * @param elev the tank's bottom elevation.
     * @param initlvl the initial water level in the tank.
     * @param minlvl the minimum water level for the tank.
     * @param maxlvl the maximum water level for the tank.
     * @param diam the tank's diameter (0 if a volume curve is supplied).
     * @param minvol the volume of the tank at its minimum water level.
     * @param volcurve the name of the tank's volume curve ("" for no curve)
     * @returns an error code.
These properties have units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_settankdata(ph: Pointer, index: number, elev: number, initlvl: number, minlvl: number, maxlvl: number, diam: number, minvol: number, volcurve: Pointer): number;

    /**
     * Gets the (x,y) coordinates of a node.
     *
     * @param ph an EPANET project handle.
     * @param index a node index (starting from 1).
     * @param x [out] the node's X-coordinate value.
     * @param y [out] the node's Y-coordinate value.
     * @returns an error code.
     */
    _EN_getcoord(ph: Pointer, index: number, x: Pointer, y: Pointer): number;

    /**
     * Sets the (x,y) coordinates of a node.
     *
     * @param ph an EPANET project handle.
     * @param index a node index (starting from 1).
     * @param x the node's X-coordinate value.
     * @param y the node's Y-coordinate value.
     * @returns an error code.
     */
    _EN_setcoord(ph: Pointer, index: number, x: number, y: number): number;

    /**
     * Retrieves the type of demand model in use and its parameters.
     *
     * @param ph an EPANET project handle.
     * @param type [out] Type of demand model (see @ref EN_DemandModel).
     * @param pmin [out] Pressure below which there is no demand.
     * @param preq [out] Pressure required to deliver full demand.
     * @param pexp [out] Pressure exponent in demand function.
     * @returns an error code.
Parameters <b>pmin, preq,</b> and \b pexp are only used when the demand model is \b EN_PDA.
     */
    _EN_getdemandmodel(ph: Pointer, type: Pointer, pmin: Pointer, preq: Pointer, pexp: Pointer): number;

    /**
     * Sets the type of demand model to use and its parameters.
     *
     * @param ph an EPANET project handle.
     * @param type Type of demand model (see @ref EN_DemandModel).
     * @param pmin Pressure below which there is no demand.
     * @param preq Pressure required to deliver full demand.
     * @param pexp Pressure exponent in demand function.
     * @returns an error code.
Set \b type to \b EN_DDA for a traditional demand driven analysis (in which case the
remaining three parameter values are ignored) or to \b EN_PDA for a pressure driven
analysis. In the latter case a node's demand is computed as:
>  `Dfull * [ (P - pmin) / (preq - pmin) ] ^ pexp`
where `Dfull` is the full demand and `P` is the current pressure.
Setting \b preq equal to \b pmin will result in a solution with the smallest amount of
demand reductions needed to insure that no node delivers positive demand at a pressure
below \b pmin.
     */
    _EN_setdemandmodel(ph: Pointer, type: number, pmin: number, preq: number, pexp: number): number;

    /**
     * appends a new demand to a junction node demands list.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex the index of a node (starting from 1).
     * @param baseDemand the demand's base value.
     * @param demandPattern the name of a time pattern used by the demand
     * @param demandName the name of the demand's category
     * @returns an error code.
A NULL or blank string can be used for `demandPattern` and for `demandName` to indicate
that no time pattern or category name is associated with the demand.
     */
    _EN_adddemand(ph: Pointer, nodeIndex: number, baseDemand: number, demandPattern: Pointer, demandName: Pointer): number;

    /**
     * deletes a demand from a junction node.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex the index of a node (starting from 1).
     * @param demandIndex the position of the demand in the node's demands list (starting from 1).
     * @returns an error code.
     */
    _EN_deletedemand(ph: Pointer, nodeIndex: number, demandIndex: number): number;

    /**
     * Retrieves the index of a node's named demand category
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex the index of a node (starting from 1)
     * @param demandName the name of a demand category for the node
     * @param demandIndex [out] the index of the demand being sought
     * @returns an error code
     */
    _EN_getdemandindex(ph: Pointer, nodeIndex: number, demandName: Pointer, demandIndex: Pointer): number;

    /**
     * Retrieves the number of demand categories for a junction node.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex the index of a node (starting from 1).
     * @param numDemands [out] the number of demand categories assigned to the node.
     * @returns an error code.
     */
    _EN_getnumdemands(ph: Pointer, nodeIndex: number, numDemands: Pointer): number;

    /**
     * Gets the base demand for one of a node's demand categories.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex a node's index (starting from 1).
     * @param demandIndex the index of a demand category for the node (starting from 1).
     * @param baseDemand [out] the category's base demand.
     * @returns an error code.
     */
    _EN_getbasedemand(ph: Pointer, nodeIndex: number, demandIndex: number, baseDemand: Pointer): number;

    /**
     * Sets the base demand for one of a node's demand categories.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex a node's index (starting from 1).
     * @param demandIndex the index of a demand category for the node (starting from 1).
     * @param baseDemand the new base demand for the category.
     * @returns an error code.
     */
    _EN_setbasedemand(ph: Pointer, nodeIndex: number, demandIndex: number, baseDemand: number): number;

    /**
     * Retrieves the index of a time pattern assigned to one of a node's demand categories.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex the node's index (starting from 1).
     * @param demandIndex the index of a demand category for the node (starting from 1).
     * @param patIndex [out] the index of the category's time pattern.
     * @returns an error code.
A returned pattern index of 0 indicates that no time pattern has been assigned to the
demand category.
     */
    _EN_getdemandpattern(ph: Pointer, nodeIndex: number, demandIndex: number, patIndex: Pointer): number;

    /**
     * Sets the index of a time pattern used for one of a node's demand categories.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex a node's index (starting from 1).
     * @param demandIndex the index of one of the node's demand categories (starting from 1).
     * @param patIndex the index of the time pattern assigned to the category.
     * @returns an error code.
Specifying a pattern index of 0 indicates that no time pattern is assigned to the
demand category.
     */
    _EN_setdemandpattern(ph: Pointer, nodeIndex: number, demandIndex: number, patIndex: number): number;

    /**
     * Retrieves the name of a node's demand category.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex a node's index (starting from 1).
     * @param demandIndex the index of one of the node's demand categories (starting from 1).
     * @param out_demandName [out] The name of the selected category.
     * @returns an error code.
\b demandName must be sized to contain at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getdemandname(ph: Pointer, nodeIndex: number, demandIndex: number, out_demandName: Pointer): number;

    /**
     * Assigns a name to a node's demand category.
     *
     * @param ph an EPANET project handle.
     * @param nodeIndex a node's index (starting from 1).
     * @param demandIdx the index of one of the node's demand categories (starting from 1).
     * @param demandName the new name assigned to the category.
     * @returns Error code.
The category name must contain no more than @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_setdemandname(ph: Pointer, nodeIndex: number, demandIdx: number, demandName: Pointer): number;

    /**
     * Adds a new link to a project.
     *
     * @param ph an EPANET project handle.
     * @param id the ID name of the link to be added.
     * @param linkType The type of link being added (see @ref EN_LinkType)
     * @param fromNode The ID name of the link's starting node.
     * @param toNode The ID name of the link's ending node.
     * @param index [out] the index of the newly added link.
     * @returns an error code.
A new pipe is assigned a diameter of 10 inches (254 mm) and a length of 330
feet (~ 100 meters). Its roughness coefficient depends on the head loss formula in effect (see @ref EN_HeadLossType) as follows:
- Hazen-Williams formula: 130
- Darcy-Weisbach formula: 0.5 millifeet (0.15 mm)
- Chezy-Manning formula: 0.01
All other pipe properties are set to 0.
A new pump has a status of \b EN_OPEN, a speed setting of 1, and has no pump
curve or power rating assigned to it.
A new valve has a diameter of 10 inches (254 mm) and all other properties set to 0.
See @ref EN_LinkProperty.
     */
    _EN_addlink(ph: Pointer, id: Pointer, linkType: number, fromNode: Pointer, toNode: Pointer, index: Pointer): number;

    /**
     * Deletes a link from the project.
     *
     * @param ph an EPANET project handle.
     * @param index the index of the link to be deleted.
     * @param actionCode The action taken if any control contains the link.
     * @returns an error code.
If \b actionCode is \b EN_UNCONDITIONAL then the link and all simple and rule-based
controls that contain it are deleted. If set to \b EN_CONDITIONAL then the link
is not deleted if it appears in any control and error 261 is returned.
     */
    _EN_deletelink(ph: Pointer, index: number, actionCode: number): number;

    /**
     * Gets the index of a link given its ID name.
     *
     * @param ph an EPANET project handle.
     * @param id a link's ID name.
     * @param index [out] the link's index (starting from 1).
     * @returns an error code.
     */
    _EN_getlinkindex(ph: Pointer, id: Pointer, index: Pointer): number;

    /**
     * Gets the ID name of a link given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param out_id [out] The link's ID name.
     * @returns an error code.
The ID name must be sized to hold at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getlinkid(ph: Pointer, index: number, out_id: Pointer): number;

    /**
     * Changes the ID name of a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param newid the new ID name for the link.
     * @returns Error code.
The ID name must not be longer than @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_setlinkid(ph: Pointer, index: number, newid: Pointer): number;

    /**
     * Retrieves a link's type.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param linkType [out] the link's type (see @ref EN_LinkType).
     * @returns an error code.
     */
    _EN_getlinktype(ph: Pointer, index: number, linkType: Pointer): number;

    /**
     * Changes a link's type.
     *
     * @param ph an EPANET project handle.
     * @param inout_index [out] the link's index before [in] and after [out] the type change.
     * @param linkType the new type to change the link to (see @ref EN_LinkType).
     * @param actionCode the action taken if any controls contain the link.
     * @returns an error code.
If \b actionCode is \b EN_UNCONDITIONAL then all simple and rule-based controls that
contain the link are deleted when the link's type is changed. If set to
\b EN_CONDITIONAL then the type change is cancelled if the link appears in any
control and error 261 is returned.
     */
    _EN_setlinktype(ph: Pointer, inout_index: Pointer, linkType: number, actionCode: number): number;

    /**
     * Gets the indexes of a link's start- and end-nodes.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param node1 [out] the index of the link's start node (starting from 1).
     * @param node2 [out] the index of the link's end node (starting from 1).
     * @returns an error code.
     */
    _EN_getlinknodes(ph: Pointer, index: number, node1: Pointer, node2: Pointer): number;

    /**
     * Sets the indexes of a link's start- and end-nodes.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param node1 The index of the link's start node (starting from 1).
     * @param node2 The index of the link's end node (starting from 1).
     * @returns an error code.
     */
    _EN_setlinknodes(ph: Pointer, index: number, node1: number, node2: number): number;

    /**
     * Retrieves a property value for a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param property the property to retrieve (see @ref EN_LinkProperty).
     * @param value [out] the current value of the property.
     * @returns an error code.
Values are returned in units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_getlinkvalue(ph: Pointer, index: number, property: number, value: Pointer): number;

    /**
     * Sets a property value for a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index.
     * @param property the property to set (see @ref EN_LinkProperty).
     * @param value the new value for the property.
     * @returns an error code.
Values are in units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_setlinkvalue(ph: Pointer, index: number, property: number, value: number): number;

    /**
     * Sets a group of properties for a pipe link.
     *
     * @param ph an EPANET project handle.
     * @param index the index of a pipe link (starting from 1).
     * @param length the pipe's length.
     * @param diam the pipe's diameter.
     * @param rough the pipe's roughness coefficient.
     * @param mloss the pipe's minor loss coefficient.
     * @returns an error code.
These properties have units that depend on the units used for flow rate (see @ref Units).
     */
    _EN_setpipedata(ph: Pointer, index: number, length: number, diam: number, rough: number, mloss: number): number;

    /**
     * Retrieves the number of internal vertex points assigned to a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param count [out] the number of vertex points that describe the link's shape.
     * @returns an error code.
     */
    _EN_getvertexcount(ph: Pointer, index: number, count: Pointer): number;

    /**
     * Retrieves the coordinate's of a vertex point assigned to a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param vertex a vertex point index (starting from 1).
     * @param x [out] the vertex's X-coordinate value.
     * @param y [out] the vertex's Y-coordinate value.
     * @returns an error code.
     */
    _EN_getvertex(ph: Pointer, index: number, vertex: number, x: Pointer, y: Pointer): number;

    /**
     * Assigns a set of internal vertex points to a link.
     *
     * @param ph an EPANET project handle.
     * @param index a link's index (starting from 1).
     * @param x an array of X-coordinates for the vertex points.
     * @param y an array of Y-coordinates for the vertex points.
     * @param count the number of vertex points being assigned.
     * @returns an error code.
Replaces any existing vertices previously assigned to the link.
     */
    _EN_setvertices(ph: Pointer, index: number, x: Pointer, y: Pointer, count: number): number;

    /**
     * Retrieves the type of head curve used by a pump.
     *
     * @param ph an EPANET project handle.
     * @param linkIndex the index of a pump link (starting from 1).
     * @param pumpType [out] the type of head curve used by the pump (see @ref EN_PumpType).
     * @returns an error code.
     */
    _EN_getpumptype(ph: Pointer, linkIndex: number, pumpType: Pointer): number;

    /**
     * Retrieves the curve assigned to a pump's head curve.
     *
     * @param ph an EPANET project handle.
     * @param linkIndex the index of a pump link (starting from 1).
     * @param curveIndex [out] the index of the curve assigned to the pump's head curve.
     * @returns an error code.
     */
    _EN_getheadcurveindex(ph: Pointer, linkIndex: number, curveIndex: Pointer): number;

    /**
     * Assigns a curve to a pump's head curve.
     *
     * @param ph an EPANET project handle.
     * @param linkIndex the index of a pump link (starting from 1).
     * @param curveIndex the index of a curve to be assigned as the pump's head curve.
     * @returns an error code.
     */
    _EN_setheadcurveindex(ph: Pointer, linkIndex: number, curveIndex: number): number;

    /**
     * Adds a new time pattern to a project.
     *
     * @param ph an EPANET project handle.
     * @param id the ID name of the pattern to add.
     * @returns an error code.
The new pattern contains a single time period whose factor is 1.0.
     */
    _EN_addpattern(ph: Pointer, id: Pointer): number;

    /**
     * Deletes a time pattern from a project.
     *
     * @param ph an EPANET project handle.
     * @param index the time pattern's index (starting from 1).
     * @returns an error code.
     */
    _EN_deletepattern(ph: Pointer, index: number): number;

    /**
     * Retrieves the index of a time pattern given its ID name.
     *
     * @param ph an EPANET project handle.
     * @param id the ID name of a time pattern.
     * @param index [out] the time pattern's index (starting from 1).
     * @returns an error code.
     */
    _EN_getpatternindex(ph: Pointer, id: Pointer, index: Pointer): number;

    /**
     * Retrieves the ID name of a time pattern given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param out_id [out] the time pattern's ID name.
     * @returns an error code.
The ID name must be sized to hold at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getpatternid(ph: Pointer, index: number, out_id: Pointer): number;

    /**
     * Changes the ID name of a time pattern given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param id the time pattern's new ID name.
     * @returns an error code.
The new ID name must not exceed @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_setpatternid(ph: Pointer, index: number, id: Pointer): number;

    /**
     * Retrieves the number of time periods in a time pattern.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param len [out] the number of time periods in the pattern.
     * @returns an error code.
     */
    _EN_getpatternlen(ph: Pointer, index: number, len: Pointer): number;

    /**
     * Retrieves a time pattern's factor for a given time period.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param period a time period in the pattern (starting from 1).
     * @param value [out] the pattern factor for the given time period.
     * @returns an error code.
     */
    _EN_getpatternvalue(ph: Pointer, index: number, period: number, value: Pointer): number;

    /**
     * Sets a time pattern's factor for a given time period.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param period a time period in the pattern (starting from 1).
     * @param value the new value of the pattern factor for the given time period.
     * @returns an error code.
     */
    _EN_setpatternvalue(ph: Pointer, index: number, period: number, value: number): number;

    /**
     * Retrieves the average of all pattern factors in a time pattern.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param value [out] The average of all of the time pattern's factors.
     * @returns an error code.
     */
    _EN_getaveragepatternvalue(ph: Pointer, index: number, value: Pointer): number;

    /**
     * Sets the pattern factors for a given time pattern.
     *
     * @param ph an EPANET project handle.
     * @param index a time pattern index (starting from 1).
     * @param values an array of new pattern factor values.
     * @param len the number of factor values supplied.
     * @returns an error code.
\b values is a zero-based array that contains \b len elements.
Use this function to redefine (and resize) a time pattern all at once;
use @ref EN_setpatternvalue to revise pattern factors one at a time.
     */
    _EN_setpattern(ph: Pointer, index: number, values: Pointer, len: number): number;

    /**
     * Adds a new data curve to a project.
     *
     * @param ph an EPANET project handle.
     * @param id The ID name of the curve to be added.
     * @returns an error code.
The new curve contains a single data point (1.0, 1.0).
     */
    _EN_addcurve(ph: Pointer, id: Pointer): number;

    /**
     * Deletes a data curve from a project.
     *
     * @param ph an EPANET project handle.
     * @param index the data curve's index (starting from 1).
     * @returns an error code.
     */
    _EN_deletecurve(ph: Pointer, index: number): number;

    /**
     * Retrieves the index of a curve given its ID name.
     *
     * @param ph an EPANET project handle.
     * @param id the ID name of a curve.
     * @param index [out] The curve's index (starting from 1).
     * @returns an error code.
     */
    _EN_getcurveindex(ph: Pointer, id: Pointer, index: Pointer): number;

    /**
     * Retrieves the ID name of a curve given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a curve's index (starting from 1).
     * @param out_id [out] the curve's ID name.
     * @returns an error code.
The ID name must be sized to hold at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getcurveid(ph: Pointer, index: number, out_id: Pointer): number;

    /**
     * Changes the ID name of a data curve given its index.
     *
     * @param ph an EPANET project handle.
     * @param index a data curve index (starting from 1).
     * @param id the data curve's new ID name.
     * @returns an error code.
The new ID name must not exceed @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_setcurveid(ph: Pointer, index: number, id: Pointer): number;

    /**
     * Retrieves the number of points in a curve.
     *
     * @param ph an EPANET project handle.
     * @param index a curve's index (starting from 1).
     * @param len [out] The number of data points assigned to the curve.
     * @returns an error code.
     */
    _EN_getcurvelen(ph: Pointer, index: number, len: Pointer): number;

    /**
     * Retrieves a curve's type.
     *
     * @param ph an EPANET project handle.
     * @param index a curve's index (starting from 1).
     * @param type [out] the curve's type (see @ref EN_CurveType).
     * @returns an error code.
     */
    _EN_getcurvetype(ph: Pointer, index: number, type: Pointer): number;

    /**
     * Retrieves the value of a single data point for a curve.
     *
     * @param ph an EPANET project handle.
     * @param curveIndex a curve's index (starting from 1).
     * @param pointIndex the index of a point on the curve (starting from 1).
     * @param x [out] the point's x-value.
     * @param y [out] the point's y-value.
     * @returns an error code.
     */
    _EN_getcurvevalue(ph: Pointer, curveIndex: number, pointIndex: number, x: Pointer, y: Pointer): number;

    /**
     * Sets the value of a single data point for a curve.
     *
     * @param ph an EPANET project handle.
     * @param curveIndex a curve's index (starting from 1).
     * @param pointIndex the index of a point on the curve (starting from 1).
     * @param x the point's new x-value.
     * @param y the point's new y-value.
     * @returns an error code.
     */
    _EN_setcurvevalue(ph: Pointer, curveIndex: number, pointIndex: number, x: number, y: number): number;

    /**
     * Retrieves all of a curve's data.
     *
     * @param ph an EPANET project handle.
     * @param index a curve's index (starting from 1).
     * @param out_id [out] the curve's ID name.
     * @param nPoints [out] the number of data points on the curve.
     * @param xValues [out] the curve's x-values.
     * @param yValues [out] the curve's y-values.
     * @returns an error code.
The calling program is responsible for making `xValues` and `yValues` large enough
to hold `nPoints` number of data points and for sizing `id` to hold at least
@ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getcurve(ph: Pointer, index: number, out_id: Pointer, nPoints: Pointer, xValues: Pointer, yValues: Pointer): number;

    /**
     * assigns a set of data points to a curve.
     *
     * @param ph an EPANET project handle.
     * @param index a curve's index (starting from 1).
     * @param xValues an array of new x-values for the curve.
     * @param yValues an array of new y-values for the curve.
     * @param nPoints the new number of data points for the curve.
     * @returns an error code.
\b xValues and \b yValues are zero-based arrays that contains \b nPoints elements.
Use this function to redefine (and resize) a curve all at once;
use @ref EN_setcurvevalue to revise a curve's data points one at a time.
     */
    _EN_setcurve(ph: Pointer, index: number, xValues: Pointer, yValues: Pointer, nPoints: number): number;

    /**
     * Adds a new simple control to a project.
     *
     * @param ph an EPANET project handle.
     * @param type the type of control to add (see @ref EN_ControlType).
     * @param linkIndex the index of a link to control (starting from 1).
     * @param setting control setting applied to the link.
     * @param nodeIndex index of the node used to control the link
(0 for \b EN_TIMER and \b EN_TIMEOFDAY controls).
     * @param level action level (tank level, junction pressure, or time in seconds)
that triggers the control.
     * @param index [out] index of the new control.
     * @returns an error code.
     */
    _EN_addcontrol(ph: Pointer, type: number, linkIndex: number, setting: number, nodeIndex: number, level: number, index: Pointer): number;

    /**
     * Deletes an existing simple control.
     *
     * @param ph an EPANET project handle.
     * @param index the index of the control to delete (starting from 1).
     * @returns an error code.
     */
    _EN_deletecontrol(ph: Pointer, index: number): number;

    /**
     * Retrieves the properties of a simple control.
     *
     * @param ph an EPANET project handle.
     * @param index the control's index (starting from 1).
     * @param type [out] the type of control (see @ref EN_ControlType).
     * @param linkIndex [out] the index of the link being controlled.
     * @param setting [out] the control setting applied to the link.
     * @param nodeIndex [out] the index of the node used to trigger the control
(0 for \b EN_TIMER and  \b EN_TIMEOFDAY controls).
     * @param level [out] the action level (tank level, junction pressure, or time in seconds)
that triggers the control.
     * @returns an error code.
     */
    _EN_getcontrol(ph: Pointer, index: number, type: Pointer, linkIndex: Pointer, setting: Pointer, nodeIndex: Pointer, level: Pointer): number;

    /**
     * Sets the properties of an existing simple control.
     *
     * @param ph an EPANET project handle.
     * @param index the control's index (starting from 1).
     * @param type the type of control (see @ref EN_ControlType).
     * @param linkIndex the index of the link being controlled.
     * @param setting the control setting applied to the link.
     * @param nodeIndex the index of the node used to trigger the control
(0 for \b EN_TIMER and \b EN_TIMEOFDAY controls).
     * @param level the action level (tank level, junction pressure, or time in seconds)
that triggers the control.
     * @returns an error code.
     */
    _EN_setcontrol(ph: Pointer, index: number, type: number, linkIndex: number, setting: number, nodeIndex: number, level: number): number;

    /**
     * Adds a new rule-based control to a project.
     *
     * @param ph an EPANET project handle.
     * @param rule text of the rule following the format used in an EPANET input file.
     * @returns an error code.
Consult the @ref RulesPage section of the @ref InpFile topic to learn about a
rule's format. Each clause of the rule must end with a newline character <b>`\n`</b>.
     */
    _EN_addrule(ph: Pointer, rule: Pointer): number;

    /**
     * Deletes an existing rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param index the index of the rule to be deleted (starting from 1).
     * @returns an error code.
     */
    _EN_deleterule(ph: Pointer, index: number): number;

    /**
     * Retrieves summary information about a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param index the rule's index (starting from 1).
     * @param nPremises [out] number of premises in the rule's IF section.
     * @param nThenActions [out] number of actions in the rule's THEN section.
     * @param nElseActions [out] number of actions in the rule's ELSE section.
     * @param priority [out] the rule's priority value.
     * @returns an error code.
     */
    _EN_getrule(ph: Pointer, index: number, nPremises: Pointer, nThenActions: Pointer, nElseActions: Pointer, priority: Pointer): number;

    /**
     * Gets the ID name of a rule-based control given its index.
     *
     * @param ph an EPANET project handle.
     * @param index the rule's index (starting from 1).
     * @param out_id [out] the rule's ID name.
     * @returns Error code.
The ID name must be sized to hold at least @ref EN_SizeLimits "EN_MAXID" characters.
     */
    _EN_getruleID(ph: Pointer, index: number, out_id: Pointer): number;

    /**
     * Gets the properties of a premise in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param premiseIndex the position of the premise in the rule's list of premises
(starting from 1).
     * @param logop [out] the premise's logical operator ( \b IF = 1, \b AND = 2, \b OR = 3 ).
     * @param object [out] the type of object the premise refers to (see @ref EN_RuleObject).
     * @param objIndex [out] the index of the object (e.g. the index of a tank).
     * @param variable [out] the object's variable being compared (see @ref EN_RuleVariable).
     * @param relop [out] the premise's comparison operator (see @ref EN_RuleOperator).
     * @param status [out] the status that the object's status is compared to
(see @ref EN_RuleStatus).
     * @param value [out] the value that the object's variable is compared to.
     * @returns an error code.
     */
    _EN_getpremise(ph: Pointer, ruleIndex: number, premiseIndex: number, logop: Pointer, object: Pointer, objIndex: Pointer, variable: Pointer, relop: Pointer, status: Pointer, value: Pointer): number;

    /**
     * Sets the properties of a premise in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param premiseIndex the position of the premise in the rule's list of premises.
     * @param logop the premise's logical operator ( \b IF = 1, \b AND = 2, \b OR = 3 ).
     * @param object the type of object the premise refers to (see @ref EN_RuleObject).
     * @param objIndex the index of the object (e.g. the index of a tank).
     * @param variable the object's variable being compared (see @ref EN_RuleVariable).
     * @param relop the premise's comparison operator (see @ref EN_RuleOperator).
     * @param status the status that the object's status is compared to
(see @ref EN_RuleStatus).
     * @param value the value that the object's variable is compared to.
     * @returns an error code.
     */
    _EN_setpremise(ph: Pointer, ruleIndex: number, premiseIndex: number, logop: number, object: number, objIndex: number, variable: number, relop: number, status: number, value: number): number;

    /**
     * Sets the index of an object in a premise of a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param premiseIndex the premise's index (starting from 1).
     * @param objIndex the index of the premise's object (e.g. the index of a tank).
     * @returns an error code.
     */
    _EN_setpremiseindex(ph: Pointer, ruleIndex: number, premiseIndex: number, objIndex: number): number;

    /**
     * Sets the status being compared to in a premise of a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param premiseIndex the premise's index (starting from 1).
     * @param status the status that the premise's object status is compared to
(see @ref EN_RuleStatus).
     * @returns an error code.
     */
    _EN_setpremisestatus(ph: Pointer, ruleIndex: number, premiseIndex: number, status: number): number;

    /**
     * Sets the value in a premise of a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (staring from 1).
     * @param premiseIndex the premise's index (starting from 1).
     * @param value The value that the premise's variable is compared to.
     * @returns an error code.
     */
    _EN_setpremisevalue(ph: Pointer, ruleIndex: number, premiseIndex: number, value: number): number;

    /**
     * Gets the properties of a THEN action in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param actionIndex the index of the THEN action to retrieve (starting from 1).
     * @param linkIndex [out] the index of the link in the action (starting from 1).
     * @param status [out] the status assigned to the link (see @ref EN_RuleStatus)
     * @param setting [out] the value assigned to the link's setting.
     * @returns an error code.
     */
    _EN_getthenaction(ph: Pointer, ruleIndex: number, actionIndex: number, linkIndex: Pointer, status: Pointer, setting: Pointer): number;

    /**
     * Sets the properties of a THEN action in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param actionIndex the index of the THEN action to modify (starting from 1).
     * @param linkIndex the index of the link in the action.
     * @param status the new status assigned to the link (see @ref EN_RuleStatus).
     * @param setting the new value assigned to the link's setting.
     * @returns an error code.
     */
    _EN_setthenaction(ph: Pointer, ruleIndex: number, actionIndex: number, linkIndex: number, status: number, setting: number): number;

    /**
     * Gets the properties of an ELSE action in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param actionIndex the index of the ELSE action to retrieve (starting from 1).
     * @param linkIndex [out] the index of the link in the action.
     * @param status [out] the status assigned to the link (see @ref EN_RuleStatus).
     * @param setting [out] the value assigned to the link's setting.
     * @returns an error code.
     */
    _EN_getelseaction(ph: Pointer, ruleIndex: number, actionIndex: number, linkIndex: Pointer, status: Pointer, setting: Pointer): number;

    /**
     * Sets the properties of an ELSE action in a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param ruleIndex the rule's index (starting from 1).
     * @param actionIndex the index of the ELSE action being modified (starting from 1).
     * @param linkIndex the index of the link in the action (starting from 1).
     * @param status the new status assigned to the link (see @ref EN_RuleStatus)
     * @param setting the new value assigned to the link's setting.
     * @returns an error code.
     */
    _EN_setelseaction(ph: Pointer, ruleIndex: number, actionIndex: number, linkIndex: number, status: number, setting: number): number;

    /**
     * Sets the priority of a rule-based control.
     *
     * @param ph an EPANET project handle.
     * @param index the rule's index (starting from 1).
     * @param priority the priority value assigned to the rule.
     * @returns an error code.
     */
    _EN_setrulepriority(ph: Pointer, index: number, priority: number): number;
}

// Default export factory function matching Emscripten MODULARIZE=1 and EXPORT_ES6=1
export default function EpanetModuleFactory(moduleOverrides?: object): Promise<EpanetModule>;
